name: Create build branch

on:
  # Allows manual triggering of the workflow from the GitHub Actions UI.
  workflow_dispatch:
  # Also triggers the workflow on any push to the 'main' branch.
  push:
    branches:
      - main
  repository_dispatch:
    types:
      - xrblocks_update

# Defines the permissions for the GITHUB_TOKEN. 'write' is required for
# pushing the build artifacts to the 'build' branch.
permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the current repository. This is where the workflow file lives.
      - name: Checkout the current repo
        uses: actions/checkout@v4

      # Step 2: Check out the external private repository 'google/xrblocks'.
      # A deploy key stored as a secret is used for authentication.
      # The contents are placed in a subdirectory named 'xrblocks'.
      - name: Checkout google/xrblocks
        uses: actions/checkout@v4
        with:
          repository: google/xrblocks
          ssh-key: ${{ secrets.READ_XRBLOCKS_SSH_KEY }}
          path: ./xrblocks

      # Step 3: Set up Node.js environment.
      # This is done only ONCE for the entire job, making the workflow more efficient.
      # It caches the global npm cache directory for faster dependency installation
      # on subsequent runs.
      - name: Setup Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          # We point to BOTH package-lock.json files to ensure the cache is
          # invalidated if dependencies in either the main project or the docs change.
          cache-dependency-path: |
            ./xrblocks/package-lock.json
            ./xrblocks/docs/package-lock.json

      # Step 4: Install dependencies for both the main project and the docs.
      # Grouping installation steps improves readability and build logic.
      - name: Install Main & Docs Dependencies
        run: |
          npm ci
          # Navigate into the docs directory and install its specific dependencies.
          npm ci --prefix ./docs
        working-directory: ./xrblocks

      # Step 5: Build both the main project and the docs.
      - name: Build Project & Docs
        run: |
          npm run build
          # Build the docs with the required environment variables.
          XRBLOCKS_BASE_URL=https://xrblocks.github.io/ URL=https://xrblocks.github.io/ BASE_URL=/docs/ npm run build --prefix ./docs
        working-directory: ./xrblocks

      # Step 6: Stage all artifacts for deployment.
      # This step creates a clean 'build' directory and copies all necessary
      # files and folders into it in a single, clear command.
      - name: Stage build artifacts
        run: |
          mkdir -p ./build/docs/
          cp -r ./xrblocks/build ./build/
          cp -r ./xrblocks/docs/build/* ./build/docs/
          cp -r ./xrblocks/demos ./build/
          cp -r ./xrblocks/samples ./build/
          cp -r ./xrblocks/templates ./build/

      # Step 7: Deploy the staged artifacts to the 'build' branch.
      # The peaceiris/actions-gh-pages action handles committing and pushing
      # the contents of the 'publish_dir' to the specified branch.
      - name: Deploy to build branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          publish_branch: build
          # Optional: Add a commit message for clarity in the target branch's history.
          commit_message: "Deploy: Automated build from ${{ github.sha }}"
