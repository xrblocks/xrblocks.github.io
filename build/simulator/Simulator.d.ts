import * as THREE from 'three';
import { FullScreenQuad } from 'three/addons/postprocessing/Pass.js';
import { Registry } from '../core/components/Registry';
import { XREffects } from '../core/components/XREffects';
import { Options } from '../core/Options';
import { Script } from '../core/Script';
import { Depth } from '../depth/Depth';
import { Input } from '../input/Input';
import { SimulatorCamera } from './SimulatorCamera';
import { SimulatorRenderMode } from './SimulatorConstants';
import { SimulatorControllerState } from './SimulatorControllerState';
import { SimulatorControls } from './SimulatorControls';
import { SimulatorDepth } from './SimulatorDepth';
import { SimulatorHands } from './SimulatorHands';
import { SimulatorInterface } from './SimulatorInterface';
import { SimulatorOptions } from './SimulatorOptions';
import { SimulatorScene } from './SimulatorScene';
import { SimulatorUser } from './SimulatorUser';
export declare class Simulator extends Script {
    private renderMainScene;
    static dependencies: {
        simulatorOptions: typeof SimulatorOptions;
        input: typeof Input;
        timer: typeof THREE.Timer;
        camera: typeof THREE.Camera;
        renderer: typeof THREE.WebGLRenderer;
        scene: typeof THREE.Scene;
        registry: typeof Registry;
        options: typeof Options;
        depth: typeof Depth;
    };
    simulatorScene: SimulatorScene;
    depth: SimulatorDepth;
    simulatorControllerState: SimulatorControllerState;
    hands: SimulatorHands;
    simulatorUser: SimulatorUser;
    userInterface: SimulatorInterface;
    controls: SimulatorControls;
    renderDepthPass: boolean;
    renderMode: SimulatorRenderMode;
    stereoCameras: THREE.Camera[];
    effects?: XREffects;
    virtualSceneRenderTarget?: THREE.WebGLRenderTarget;
    virtualSceneFullScreenQuad?: FullScreenQuad;
    camera?: SimulatorCamera;
    options: SimulatorOptions;
    renderer: THREE.WebGLRenderer;
    mainCamera: THREE.Camera;
    mainScene: THREE.Scene;
    private initialized;
    private renderSimulatorSceneToCanvasBound;
    private sparkRenderer?;
    private registry?;
    constructor(renderMainScene: (cameraOverride?: THREE.Camera) => void);
    init({ simulatorOptions, input, timer, camera, renderer, scene, registry, options, depth, }: {
        simulatorOptions: SimulatorOptions;
        input: Input;
        timer: THREE.Timer;
        camera: THREE.Camera;
        renderer: THREE.WebGLRenderer;
        scene: THREE.Scene;
        registry: Registry;
        options: Options;
        depth: Depth;
    }): Promise<void>;
    simulatorUpdate(): void;
    setStereoRenderMode(mode: SimulatorRenderMode): void;
    setupStereoCameras(camera: THREE.Camera): void;
    onBeforeSimulatorSceneRender(): void;
    onSimulatorSceneRendered(): void;
    getRenderCamera(): THREE.Camera;
    renderScene(): void;
    renderSimulatorScene(): void;
    private renderSimulatorSceneToCanvas;
}
