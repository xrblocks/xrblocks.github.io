"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3676],{8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var s=n(6540);const t={},a=s.createContext(t);function l(e){const i=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:i},e.children)}},8573:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"manual/UI","title":"UI","description":"XR Blocks includes a 2D UI toolkit to create 2D UI elements in a panel within the scene.","source":"@site/docs/manual/UI.mdx","sourceDirName":"manual","slug":"/manual/UI","permalink":"/manual/UI","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Drag Manager","permalink":"/manual/DragManager"}}');var t=n(4848),a=n(8453);const l={},r=void 0,d={},o=[{value:"View",id:"view",level:2},{value:"Relative positioning and sizing.",id:"relative-positioning-and-sizing",level:3},{value:"Coordinate system",id:"coordinate-system",level:3},{value:"Available Views",id:"available-views",level:2},{value:"Panel",id:"panel",level:3},{value:"Spatial Panel",id:"spatial-panel",level:3},{value:"Grid View",id:"grid-view",level:3},{value:"Image View",id:"image-view",level:3},{value:"Text View",id:"text-view",level:3},{value:"Horizontal and Vertical Pagers",id:"horizontal-and-vertical-pagers",level:3},{value:"Scrolling Text View",id:"scrolling-text-view",level:3}];function c(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"XR Blocks includes a 2D UI toolkit to create 2D UI elements in a panel within the scene."}),"\n",(0,t.jsx)(i.h2,{id:"view",children:"View"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"View"})," class extends the ",(0,t.jsx)(i.code,{children:"Script"})," class with utilities methods to facilities rendering 2D UI:"]}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Relative positioning and sizing"}),"\n",(0,t.jsx)(i.li,{children:"Setting the render order based on the scene graph depth"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"relative-positioning-and-sizing",children:"Relative positioning and sizing."}),"\n",(0,t.jsx)(i.p,{children:"Object extending the view class are positioned and sized relative to their parent. \\"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"x"})," and ",(0,t.jsx)(i.code,{children:"y"})," set the relative position the view where ",(0,t.jsx)(i.code,{children:"-0.5"})," and ",(0,t.jsx)(i.code,{children:"0.5"})," represent the left and right edges of the parent view."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"width"})," and ",(0,t.jsx)(i.code,{children:"height"})," set the relative size of the view where ",(0,t.jsx)(i.code,{children:"1.0"})," represents the full width or height of the parent view."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"updateLayout()"})," function applies the relative position to the ",(0,t.jsx)(i.code,{children:"position"})," and ",(0,t.jsx)(i.code,{children:"scale"})," properties of the view and computes a new ",(0,t.jsx)(i.code,{children:"aspectRatio"})," property based on the parent view.\nIt is automatically called when the view is added to another view or when ",(0,t.jsx)(i.code,{children:"updateLayoutsBFS"})," is called from any parent view."]}),"\n",(0,t.jsxs)(i.p,{children:["Child classes may override ",(0,t.jsx)(i.code,{children:"updateLayout"})," to respond to changes in position or scale."]}),"\n",(0,t.jsx)(i.h3,{id:"coordinate-system",children:"Coordinate system"}),"\n",(0,t.jsxs)(i.p,{children:["The coordinate system within a view is uniformely scaled such that the origin ",(0,t.jsx)(i.code,{children:"(0, 0, 0)"})," represents the center of the view and the range ",(0,t.jsx)(i.code,{children:"[-0.5,0.5] x [-0.5,0.5]"})," represents the largest square which fits within the view.\nView objects provide a ",(0,t.jsx)(i.code,{children:"aspectRatio"})," property which provides a true ratio of width over height."]}),"\n",(0,t.jsxs)(i.p,{children:["As a helper utility, each view provides two getter properties, ",(0,t.jsx)(i.code,{children:"rangeX"})," and ",(0,t.jsx)(i.code,{children:"rangeY"}),", which provide the height and width of the view within it's own coordinate system based on the aspect ratio.\nFor example, a landscape view with a ",(0,t.jsx)(i.code,{children:"16:9"})," aspect ratio will have a ",(0,t.jsx)(i.code,{children:"rangeX == 16/9"})," and a ",(0,t.jsx)(i.code,{children:"rangeY == 1"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"available-views",children:"Available Views"}),"\n",(0,t.jsx)(i.p,{children:"The following views are provided as initial building blocks:"}),"\n",(0,t.jsx)(i.h3,{id:"panel",children:"Panel"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Panel"})," class provides a root view with a rounded rectangle mesh to serve as a background. It also positions itself in front of the user by default."]}),"\n",(0,t.jsx)(i.p,{children:"For example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"const panel = new xb.Panel({\n  width: 1.0,\n  height: 1.0,\n  backgroundColor: '#00000000',\n  useDefaultPosition: true\n});\n"})}),"\n",(0,t.jsx)(i.h3,{id:"spatial-panel",children:"Spatial Panel"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.code,{children:"SpatialPanel"})," is a draggable version of the ",(0,t.jsx)(i.code,{children:"Panel"})," class."]}),"\n",(0,t.jsx)(i.p,{children:"For example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"const panel = new xb.SpatialPanel({\n  backgroundColor: '#00000000',\n  useDefaultPosition: true,\n  showEdge: true\n});\n"})}),"\n",(0,t.jsx)(i.h3,{id:"grid-view",children:"Grid View"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"GridView"})," class allows splitting up a view into multiple sections."]}),"\n",(0,t.jsx)(i.h3,{id:"image-view",children:"Image View"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"ImageView"})," class displays a image from a URL."]}),"\n",(0,t.jsx)(i.h3,{id:"text-view",children:"Text View"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"TextView"})," class adds text using the ",(0,t.jsxs)(i.a,{href:"https://github.com/protectwise/troika",children:[(0,t.jsx)(i.code,{children:"troika-three-text"})," library"]}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"horizontal-and-vertical-pagers",children:"Horizontal and Vertical Pagers"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"HorizontalPager"})," and ",(0,t.jsx)(i.code,{children:"VerticalPager"})," classes provide scrolling pages to your views."]}),"\n",(0,t.jsx)(i.p,{children:"They can be combined with the following additional classes:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"PagerState"})," which holds the current page and automatically scrolls to the nearest page."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"PageIndicator"})," adds a small page indicator \u25e6\u25e6\u2022\u25e6\u25e6 based on the pager state."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"scrolling-text-view",children:"Scrolling Text View"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"ScrollingTroikaTextView"})," class provides a text view where the text moves upwards out of the view when a new line is added."]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);