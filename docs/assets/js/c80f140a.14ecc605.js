"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5842],{5183:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"manual/DragManager","title":"Drag Manager","description":"The DragManager class provides interactions for ModelViewer objects and is loaded at core.dragManager.","source":"@site/docs/manual/DragManager.md","sourceDirName":"manual","slug":"/manual/DragManager","permalink":"/docs/manual/DragManager","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Drag Manager"},"sidebar":"tutorialSidebar","previous":{"title":"Model Viewer","permalink":"/docs/manual/ModelViewer"},"next":{"title":"Hand Gestures","permalink":"/docs/manual/HandGestures"}}');var a=t(4848),i=t(8453);const r={sidebar_position:11,title:"Drag Manager"},s=void 0,l={},d=[{value:"Interactions",id:"interactions",level:2},{value:"Translation",id:"translation",level:3},{value:"Rotation",id:"rotation",level:3},{value:"Scaling",id:"scaling",level:3},{value:"Usage",id:"usage",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"DragManager"})," class provides interactions for ",(0,a.jsx)(n.code,{children:"ModelViewer"})," objects and is loaded at ",(0,a.jsx)(n.code,{children:"core.dragManager"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"interactions",children:"Interactions"}),"\n",(0,a.jsx)(n.h3,{id:"translation",children:"Translation"}),"\n",(0,a.jsx)(n.p,{children:"Translation is initiated by selecting the platform of the model viewer object and moving or rotating the hand or controller.\nDuring translation, the rotation of the object stays the same."}),"\n",(0,a.jsx)(n.h3,{id:"rotation",children:"Rotation"}),"\n",(0,a.jsx)(n.p,{children:"Rotation is initiated by selecting the invisible bounding cylinder of bounding box of the object and moving the hand or controller.\nOnly the yaw of the model is rotated."}),"\n",(0,a.jsxs)(n.p,{children:["In the simulator, the rotation is based on the direction of the ",(0,a.jsx)(n.code,{children:"MouseController"})," as the position of the ",(0,a.jsx)(n.code,{children:"MouseController"})," is constrained to the camera position."]}),"\n",(0,a.jsx)(n.h3,{id:"scaling",children:"Scaling"}),"\n",(0,a.jsx)(n.p,{children:"Scaling is initiated by selecting the object with both hands or controllers.\nWhile selecting, the scale of the model will be set based on the distance between both controllers."}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.p,{children:"The Drag Manager can also be used with custom objects beyond Model Viewer."}),"\n",(0,a.jsxs)(n.p,{children:["To allow a custom object to be used with drag manager, add a ",(0,a.jsx)(n.code,{children:"draggable"})," property to the object to allow it to be detected by DragManager.\nThen add children with a ",(0,a.jsx)(n.code,{children:"draggingMode"})," property set to one of the following values:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"DragManager.TRANSLATING"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"DragManager.ROTATING"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["When selecting one of the children with one of the above values, the object with ",(0,a.jsx)(n.code,{children:"draggable"})," property will begin translating or rotating."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);