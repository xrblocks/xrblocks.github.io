"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4823],{3411:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"manual/HandGestures","title":"Hand Gestures","description":"XR Blocks ships with an opt-in gesture recognition subsystem powered by the","source":"@site/docs/manual/HandGestures.md","sourceDirName":"manual","slug":"/manual/HandGestures","permalink":"/docs/manual/HandGestures","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Drag Manager","permalink":"/docs/manual/DragManager"},"next":{"title":"UI","permalink":"/docs/manual/UI"}}');var i=t(74848),r=t(28453);const o={sidebar_position:11},a="Hand Gestures",d={},c=[{value:"Enabling the gesture subsystem",id:"enabling-the-gesture-subsystem",level:2},{value:"Listening for gesture events",id:"listening-for-gesture-events",level:2},{value:"Heuristic testing template",id:"heuristic-testing-template",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"hand-gestures",children:"Hand Gestures"})}),"\n",(0,i.jsxs)(n.p,{children:["XR Blocks ships with an opt-in gesture recognition subsystem powered by the\n",(0,i.jsx)(n.code,{children:"GestureRecognition"})," script. When enabled, it inspects WebXR hand joints (or a\nfuture ML provider) and emits high-level gesture events that any script can\nsubscribe to."]}),"\n",(0,i.jsx)(n.h2,{id:"enabling-the-gesture-subsystem",children:"Enabling the gesture subsystem"}),"\n",(0,i.jsxs)(n.p,{children:["Call ",(0,i.jsx)(n.code,{children:"options.enableGestures()"})," before ",(0,i.jsx)(n.code,{children:"xb.init()"})," to toggle on hand tracking\nand the shared recogniser. You can tweak the provider, confidence threshold, and\nindividual gesture toggles from the same options object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import * as xb from 'xrblocks';\n\nconst options = new xb.Options();\noptions.enableGestures();\noptions.gestures.provider = 'heuristics'; // current WebXR joint heuristics\noptions.gestures.minimumConfidence = 0.7; // default is 0.6\noptions.gestures.setGestureEnabled('point', true);\noptions.gestures.setGestureEnabled('spread', true);\n\nxb.init(options);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"gestures"})," options bag is fully mergeable, so you can supply the same fields\nwhen instantiating ",(0,i.jsx)(n.code,{children:"new xb.Options({...})"})," if you prefer declarative\nconfiguration."]}),"\n",(0,i.jsx)(n.h2,{id:"listening-for-gesture-events",children:"Listening for gesture events"}),"\n",(0,i.jsxs)(n.p,{children:["Once the runtime is initialised, the recogniser is exposed at\n",(0,i.jsx)(n.code,{children:"xb.core.gestureRecognition"}),". Subscribe to ",(0,i.jsx)(n.code,{children:"gesturestart"}),", ",(0,i.jsx)(n.code,{children:"gestureupdate"}),", and\n",(0,i.jsx)(n.code,{children:"gestureend"})," events to drive game logic or debugging output."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import * as xb from 'xrblocks';\n\nclass GestureDebugger extends xb.Script {\n  init() {\n    const gestures = xb.core.gestureRecognition;\n    if (!gestures) return;\n    const log = (phase, {hand, name, confidence = 0}) =>\n        console.log(`[gesture] ${hand} hand ${name} ${phase} ` +\n                    `(${confidence.toFixed(2)})`);\n    gestures.addEventListener('gesturestart', (event) => log('start', event.detail));\n    gestures.addEventListener('gestureupdate', (event) => log('update', event.detail));\n    gestures.addEventListener('gestureend', (event) => log('end', event.detail));\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Remember to remove listeners in ",(0,i.jsx)(n.code,{children:"dispose()"})," if you manually manage the script\u2019s\nlifecycle."]}),"\n",(0,i.jsx)(n.h2,{id:"heuristic-testing-template",children:"Heuristic testing template"}),"\n",(0,i.jsxs)(n.p,{children:["The repository includes ",(0,i.jsx)(n.code,{children:"templates/heuristic_hand_gestures"}),", which configures\nthe heuristic provider and logs every gesture\u2019s start/end phases to the console.\nIt is handy for validating pinch, open-palm, fist, thumbs-up, point, and spread\nrecognition on Quest or in the desktop simulator."]}),"\n",(0,i.jsx)(n.p,{children:"If you need deeper insight, consider piping the event data into your own UI or\ntelemetry system."})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);